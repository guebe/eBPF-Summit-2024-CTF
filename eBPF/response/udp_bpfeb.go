// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadUdp returns the embedded CollectionSpec for udp.
func loadUdp() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_UdpBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load udp: %w", err)
	}

	return spec, err
}

// loadUdpObjects loads udp and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*udpObjects
//	*udpPrograms
//	*udpMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadUdpObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadUdp()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// udpSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type udpSpecs struct {
	udpProgramSpecs
	udpMapSpecs
}

// udpSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type udpProgramSpecs struct {
	TcEgress  *ebpf.ProgramSpec `ebpf:"tc_egress_"`
	TcIngress *ebpf.ProgramSpec `ebpf:"tc_ingress"`
}

// udpMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type udpMapSpecs struct {
}

// udpObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadUdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type udpObjects struct {
	udpPrograms
	udpMaps
}

func (o *udpObjects) Close() error {
	return _UdpClose(
		&o.udpPrograms,
		&o.udpMaps,
	)
}

// udpMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadUdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type udpMaps struct {
}

func (m *udpMaps) Close() error {
	return _UdpClose()
}

// udpPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadUdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type udpPrograms struct {
	TcEgress  *ebpf.Program `ebpf:"tc_egress_"`
	TcIngress *ebpf.Program `ebpf:"tc_ingress"`
}

func (p *udpPrograms) Close() error {
	return _UdpClose(
		p.TcEgress,
		p.TcIngress,
	)
}

func _UdpClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed udp_bpfeb.o
var _UdpBytes []byte
